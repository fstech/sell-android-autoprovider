plugins {
  id 'com.android.library'
  id 'com.github.ben-manes.versions'
  id 'maven-publish'
  id 'signing'
}

android {
  compileSdkVersion 30

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion 30
    versionName project.VERSION_NAME
    versionCode Integer.parseInt(project.VERSION_CODE)
    consumerProguardFiles 'consumer-proguard-rules.pro'
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      maxHeapSize "2048m"
      jvmArgs '-noverify', '-XX:MaxPermSize=256m'
    }
  }
}

dependencies {
  testImplementation('junit:junit:4.13.1') {
    exclude module: 'hamcrest-core'
  }
  testImplementation 'org.robolectric:robolectric:4.5.1'
  testImplementation 'org.mockito:mockito-all:1.10.19'
  testImplementation 'com.google.truth:truth:1.1.2'
  testImplementation 'com.getbase.android.forger:forger:0.2'

  implementation 'com.google.guava:guava:30.0-android'
  implementation 'androidx.annotation:annotation:1.1.0'
  implementation 'org.chalup.thneed:thneed:0.7'
  implementation 'com.getbase.android.db:library:0.15.0'
  implementation 'org.chalup.microorm:microorm:0.8.0'
  implementation 'com.getbase.android.schema:library:0.8'
}

task androidJavadocs(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  failOnError = false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
  archiveClassifier.set('javadoc')
  from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
  archiveClassifier.set('sources')
  from android.sourceSets.main.java.sourceFiles
}

artifacts {
  archives androidSourcesJar
  archives androidJavadocsJar
}

project.afterEvaluate {
  project.tasks.findByName("test").getTaskDependencies().getDependencies().each { task ->
    task.jvmArgs('-noverify')
  }
}

def libraryGroupId = 'com.getbase.android.autoprovider'
def libraryArtifactId = 'library'

apply from: '../developers.gradle'

def pomConfig = {
  licenses {
    license {
      name 'The Apache Software License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    }
  }
  developers project_developers
  scm {
    connection 'https://github.com/zendesk/android-autoprovider.git'
    developerConnection 'https://github.com/zendesk/android-autoprovider.git'
    url 'https://github.com/zendesk/android-autoprovider'
  }
}

ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')

afterEvaluate {
  publishing {
    publications {
      // Creates a Maven publication called "release".
      release(MavenPublication) {
        from components.release
        artifact androidSourcesJar
        artifact androidJavadocsJar
        groupId = libraryGroupId
        artifactId = libraryArtifactId
        version = project.VERSION_NAME

        pom.withXml {
          def root = asNode()
          root.appendNode('description', POM_DESCRIPTION)
          root.appendNode('name', 'android-autoprovider')
          root.appendNode('url', POM_URL)
          root.children().last() + pomConfig
        }
      }
    }
    repositories {
      maven {
        String releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        String snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        url = project.VERSION_NAME.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl

        credentials {
          username ossrhUsername
          password ossrhPassword
        }
      }
    }
  }
}

signing {
  required { !project.VERSION_NAME.endsWith('SNAPSHOT') }
  sign publishing.publications
}

publish {
  doLast {
    println "The published version: ${project.VERSION_NAME}"
  }
}
