plugins {
  id 'com.android.library'
  id 'com.github.ben-manes.versions'
  id 'maven-publish'
  id 'com.jfrog.bintray'
}

android {
  compileSdkVersion 30
  buildToolsVersion "21.1.2"

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion 30
    versionName project.VERSION_NAME
    versionCode Integer.parseInt(project.VERSION_CODE)
    consumerProguardFiles 'consumer-proguard-rules.pro'
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      maxHeapSize "2048m"
      jvmArgs '-noverify', '-XX:MaxPermSize=256m'
    }
  }
}

dependencies {
  testCompile('junit:junit:4.12') {
    exclude module: 'hamcrest-core'
  }
  testCompile 'org.robolectric:robolectric:4.4'
  testCompile 'org.mockito:mockito-all:1.10.19'
  testCompile 'com.google.truth:truth:1.0.1'

  compile 'com.google.guava:guava:30.0-android'
  compile 'androidx.annotation:annotation:1.0.0'
  compile 'org.chalup.thneed:thneed:0.7'
  compile 'com.getbase.android.db:library:0.15.0'
  compile 'org.chalup.microorm:microorm:0.6.2'
  compile 'com.getbase.android.forger:forger:0.1'
  compile 'androidx.legacy:legacy-support-v4:1.0.0'
  compile 'com.getbase.android.schema:library:0.7'
}

task androidJavadocs(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  failOnError = false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
  classifier = 'javadoc'
  from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.sourceFiles
}

artifacts {
  archives androidSourcesJar
  archives androidJavadocsJar
}

project.afterEvaluate {
  project.tasks.findByName("test").getTaskDependencies().getDependencies().each { task ->
    task.jvmArgs('-noverify')
  }
}

def libraryGroupId = 'com.getbase.android.autoprovider'
def libraryArtifactId = 'library'
def libraryVersion = VERSION_NAME

apply from: '../developers.gradle'

def pomConfig = {
  licenses {
    license {
      name 'The Apache Software License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    }
  }
  developers project_developers
  scm {
    connection 'https://github.com/zendesk/android-autoprovider.git'
    developerConnection 'https://github.com/zendesk/android-autoprovider.git'
    url 'https://github.com/zendesk/android-autoprovider'
  }
}

afterEvaluate {
  publishing {
    publications {
      // Creates a Maven publication called "release".
      release(MavenPublication) {
        from components.release
        artifact androidSourcesJar
        artifact androidJavadocsJar
        groupId = libraryGroupId
        artifactId = libraryArtifactId
        version = libraryVersion

        pom.withXml {
          def root = asNode()
          root.appendNode('description', POM_DESCRIPTION)
          root.appendNode('name', 'android-autoprovider')
          root.appendNode('url', POM_URL)
          root.children().last() + pomConfig
        }
      }
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')

  publications = ['release']
  publish = true
  override = true
  pkg {
    repo = 'maven'
    userOrg = 'basecrm'
    name = 'com.getbase.android.autoprovider:library'
    desc = 'com.getbase.android.autoprovider'
    licenses = ['Apache-2.0']
    websiteUrl = 'https://github.com/zendesk/android-autoprovider'
    vcsUrl = 'https://github.com/zendesk/android-autoprovider.git'
    publicDownloadNumbers = true
    version {
      name = libraryVersion
      released = new Date()
    }
  }
}
